package com.krakedev.inventarios.bdd;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;

import java.util.ArrayList;
import java.util.Date;

import com.krakedev.inventarios.entidades.Categorias;
import com.krakedev.inventarios.entidades.DetallePedido;
import com.krakedev.inventarios.entidades.Pedido;
import com.krakedev.inventarios.entidades.Producto;
import com.krakedev.inventarios.entidades.UnidadesMedida;
import com.krakedev.inventarios.excepciones.KrakeDevException;
import com.krakedev.inventarios.utils.ConexionBDD;


public class PedidosBDD {
	public void insertar(Pedido pedido) throws KrakeDevException{
		Connection con = null; 
		PreparedStatement ps = null;
		PreparedStatement psDetalle = null;
		ResultSet rsClave = null;
		int codigoCabecera = 0;
		
		Date fechaActual = new Date();
		java.sql.Date fechaSQL = new java.sql.Date(fechaActual.getTime());
		
		try {
			con = ConexionBDD.obtenerConexion();
			ps = con.prepareStatement("insert into cabecera_pedido(proveedor, fecha, estado) values (?,?,?)", Statement.RETURN_GENERATED_KEYS);
			ps.setString(1, pedido.getProveedor().getIdentificador());
			ps.setDate(2, fechaSQL);
			ps.setString(3, "S");

			ps.executeUpdate();
			
			rsClave = ps.getGeneratedKeys();
			if(rsClave.next()){
				codigoCabecera = rsClave.getInt(1);
			}
			
			ArrayList<DetallePedido> detallesPedidos = pedido.getDetalles();
			DetallePedido det;
			
			for(int i=0; i<detallesPedidos.size(); i++) {
				det = detallesPedidos.get(i);
				psDetalle = con.prepareStatement("insert into detalle_pedido(cabecera_pedido, producto, cantidad_solicitada, subtotal, cantidad_recibida) values (?,?,?,?,?)");
				psDetalle.setInt(1, codigoCabecera);
				psDetalle.setInt(2, det.getProducto().getCodigo_pro());
				psDetalle.setInt(3, det.getCantidad_solicitada());
				BigDecimal pv = det.getProducto().getPrecio_venta();
				BigDecimal cantidad = new BigDecimal(det.getCantidad_solicitada());
				BigDecimal subtotal = pv.multiply(cantidad);
				psDetalle.setBigDecimal(4, subtotal);
				psDetalle.setInt(5, 0);
				
				psDetalle.executeUpdate();
			}
			
		} catch (SQLException e) {
			throw new KrakeDevException("Error al insertar pedido, detalle: "+e.getMessage());
		} catch (KrakeDevException e) {
			throw e;
		} finally{
			if(con != null){
				try {
					con.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
	}
	
	public void actualizar(Pedido pedido) throws KrakeDevException{
		Connection con = null; 
		PreparedStatement ps = null;
		PreparedStatement psDetalle = null;
		PreparedStatement psHStock = null;
		try {
			con = ConexionBDD.obtenerConexion();
			ps = con.prepareStatement("update cabecera_pedido set estado = ? where numero_cab = ?");
			ps.setString(1, "R");
			ps.setInt(2, pedido.getNumero_cab());

			ps.executeUpdate();
			
			ArrayList<DetallePedido> detallesPedidos = pedido.getDetalles();
			DetallePedido det;
			
			for(int i=0; i<detallesPedidos.size(); i++) {
				det = detallesPedidos.get(i);
				psDetalle = con.prepareStatement("update detalle_pedido set cantidad_recibida = ?, subtotal = ? where codigo_dp = ?");
				psDetalle.setInt(1, det.getCantidad_recibida());
				BigDecimal pv = det.getProducto().getPrecio_venta();
				BigDecimal cantidad = new BigDecimal(det.getCantidad_recibida());
				BigDecimal subtotal = pv.multiply(cantidad);
				psDetalle.setBigDecimal(2, subtotal);
				psDetalle.setInt(3, det.getCodigo_dp());
				psDetalle.executeUpdate();
				
				Date fechaActual = new Date();
				Timestamp fechaHora = new Timestamp(fechaActual.getTime());
				
				psHStock = con.prepareStatement("insert into historial_stock (fecha, referencia, producto, cantidad) values (?, ?, ?, ?)");
				psHStock.setTimestamp(1, fechaHora);
				String referencia = "Pedido "+pedido.getNumero_cab();
				psHStock.setString(2, referencia);
				psHStock.setInt(3, det.getProducto().getCodigo_pro());
				psHStock.setInt(4, det.getCantidad_recibida());
				
				psHStock.executeUpdate();
			}
			
		} catch (SQLException e) {
			throw new KrakeDevException("Error al actualizar pedido, detalle: "+e.getMessage());
		} catch (KrakeDevException e) {
			throw e;
		} finally{
			if(con != null){
				try {
					con.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
	}
	
	public ArrayList<Pedido> buscarPorProveedor(String identP) throws KrakeDevException {
		ArrayList<Producto> productos = new ArrayList<Producto>();
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		Producto producto = null;
		try {
			con = ConexionBDD.obtenerConexion();
			ps = con.prepareStatement("select prod.codigo_pro, prod.nombre as nombre_producto,\r\n"
					+ "udm.codigo_udm as nombre_udm, udm.descripcion as descripcion_udm,\r\n"
					+ "cast(prod.precio_venta as decimal(6,2)), prod.tiene_iva, cast(prod.coste as decimal(6,2)),\r\n"
					+ "prod.categoria, cat.nombre as nombre_categoria, prod.stock\r\n"
					+ "from productos prod, unidades_medida udm, categorias cat\r\n"
					+ "where prod.udm = udm.codigo_udm\r\n"
					+ "and prod.categoria = cat.codigo_cat\r\n"
					+ "and upper(prod.nombre) like ?");
			ps.setString(1, "%" + subcadena.toUpperCase() + "%");
			rs = ps.executeQuery();

			while (rs.next()) {
				
				int codigo_pro = rs.getInt("codigo_pro");
				String nombre_producto = rs.getString("nombre_producto");
				String nombre_udm = rs.getString("nombre_udm");
				String descripcion_udm = rs.getString("descripcion_udm");
				BigDecimal precio_venta = rs.getBigDecimal("precio_venta");
				boolean tiene_iva = rs.getBoolean("tiene_iva");
				BigDecimal coste = rs.getBigDecimal("coste");
				int codigoCategoria = rs.getInt("categoria");
				String nombre_categoria = rs.getString("nombre_categoria");
				int stock = rs.getInt("stock");
				
				UnidadesMedida udm = new UnidadesMedida();
				udm.setCodigo_udm(nombre_udm);
				udm.setDescripcion(descripcion_udm);
				
				Categorias categoria = new Categorias();
				categoria.setCodigo_cat(codigoCategoria);
				categoria.setNombre(nombre_categoria);

				producto = new Producto();
				producto.setCodigo_pro(codigo_pro);
				producto.setNombre(nombre_producto);
				producto.setUdm(udm);
				producto.setPrecio_venta(precio_venta);
				producto.setTiene_iva(tiene_iva);
				producto.setCoste(coste);
				producto.setCategoria(categoria);
				producto.setStock(stock);
				
				productos.add(producto);
			}

		} catch (KrakeDevException e) {
			e.printStackTrace();
			throw e;
		} catch (SQLException e) {
			e.printStackTrace();
			throw new KrakeDevException("Error al consultar productos, detalle: " + e.getMessage());
		}
		return productos;
}
